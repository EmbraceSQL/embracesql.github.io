"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5976],{2852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var r=n(5893),a=n(1151),s=n(130);const i='"use client";\n\nimport {\n  EmbraceSQLClient,\n  EmbraceSQLProvider,\n  Scripts,\n} from "../../client/dvdrental-react";\n\nfunction Script() {\n  // you can read from an SQL script that is just a SQL file in your source tree\n  const { rows } = Scripts.MovieListing.useMovieListing();\n\n  if (rows) {\n    // old school - let\'s make a table - EmbraceSQL generates column\n    // name metadata based on the table schemas which makes it easy to iterate\n    return (\n      <table>\n        <thead>\n          <tr>\n            {Scripts.MovieListing.ColumnNames.map((c) => (\n              <th key={c}>{c}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((r) => (\n            <tr key={r.rowNumberInResultset}>\n              {Scripts.MovieListing.ColumnNames.map((c) => (\n                <td key={c}>{`${r[\n                  Scripts.MovieListing.Columns[c].fieldName\n                ]?.toLocaleString()}`}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default function Page() {\n  // connect to where we mounted EmbraceSQL in our server\n  const client = new EmbraceSQLClient({\n    url: `/embracesql`,\n  });\n  // set up the EmbraceSQL context\n  return (\n    <EmbraceSQLProvider client={client}>\n      <Script />\n    </EmbraceSQLProvider>\n  );\n}\n';var o=n(9286),c=n(1430);const l={},d="SQL Script",p={id:"React/Cookbook/script",title:"SQL Script",description:"You want to pull in some data and create a view using an SQL query. Write an",source:"@site/docs/React/Cookbook/script.mdx",sourceDirName:"React/Cookbook",slug:"/React/Cookbook/script",permalink:"/docs/React/Cookbook/script",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Script Report",permalink:"/docs/React/Cookbook/report"},next:{title:"Database Table",permalink:"/docs/React/Cookbook/table"}},u={},h=[{value:"Requirements",id:"requirements",level:2},{value:"Steps",id:"steps",level:2},{value:"Write an SQL Script",id:"write-an-sql-script",level:3},{value:"Generate Code",id:"generate-code",level:3},{value:"Code React",id:"code-react",level:3}];function m(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"sql-script",children:"SQL Script"}),"\n",(0,r.jsx)(t.p,{children:"You want to pull in some data and create a view using an SQL query. Write an\nSQL script and generate away!"}),"\n",(0,r.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(t.p,{children:["Make sure you are read as specified in the ",(0,r.jsx)(t.a,{href:"./",children:"Cookbook"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(t.h3,{id:"write-an-sql-script",children:"Write an SQL Script"}),"\n",(0,r.jsx)(t.p,{children:"Here is our SQL, we're going to make a report of all the movies in the sample\ndatabase, along with their actors. Using an ARRAY, which you might have avoided\nin the past becuase it is a pain to deal with using off the shelf PostgreSQL drivers."}),"\n",(0,r.jsx)(o.Z,{language:"sql",title:"./sql/movie_listing.sql",children:s.Z}),"\n",(0,r.jsx)(t.h3,{id:"generate-code",children:"Generate Code"}),"\n",(0,r.jsx)(t.p,{children:"Now that there is a SQL Script - regenerate from the database. If you are already\nrunning NextJS, it'll hot reload."}),"\n",(0,r.jsx)(o.Z,{language:"shell",children:c.Z}),"\n",(0,r.jsx)(t.h3,{id:"code-react",children:"Code React"}),"\n",(0,r.jsx)(t.p,{children:"Now use a table hook. Note the options to paginate and sort."}),"\n",(0,r.jsx)(o.Z,{language:"tsx",title:"src/app/script/page.tsx",children:i})]})}function b(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1430:(e,t,n)=>{n.d(t,{Z:()=>r});const r="#!/usr/bin/env bash\n\nmkdir -p src/server\nnpx embracesqlcli generate node --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/server/dvdrental.ts\n\nmkdir -p src/client\nnpx embracesqlcli generate react --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/client/dvdrental-react.ts"},130:(e,t,n)=>{n.d(t,{Z:()=>r});const r="SELECT\n  film_id,\n  title,\n  release_year,\n  rating,\n  -- nested array so we don't need multiple trips to the database\n  -- this is a nice way to embrace SQL!\n  -- this is also a query that won't parse well with off the shelf\n  -- postgres client drivers, but we'll generate strong types automatically\n  ARRAY(\n\t  SELECT\n\t    first_name || ' ' || last_name\n\t  FROM\n\t    public.actor JOIN public.film_actor fa USING (actor_id)\n\t  WHERE\n        fa.film_id = f.film_id\n  ) AS actors\n\nFROM \n  public.film f"}}]);