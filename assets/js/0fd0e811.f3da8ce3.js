"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3544],{4766:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(5893),n=t(1151),c=t(9286);const a={},i="SQL Scripts",l={id:"sql",title:"SQL Scripts",description:"You can create a directory tree full of parameterized SQL scripts that",source:"@site/docs/sql.mdx",sourceDirName:".",slug:"/sql",permalink:"/docs/sql",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Security",permalink:"/docs/security"}},o={},d=[{value:"Example",id:"example",level:2}];function p(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"sql-scripts",children:"SQL Scripts"}),"\n",(0,r.jsx)(s.p,{children:"You can create a directory tree full of parameterized SQL scripts that\nEmbraceSQL will inspect and generate strongly typed TypeScript wrappers."}),"\n",(0,r.jsx)(s.p,{children:"These wrappers are callable as async functions, with typed parameter inputs and\ntyped row outputs. No need to ever create 'pojo' types to get intellisense on\nyour queries ever again!"}),"\n",(0,r.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.p,{children:"... specify the root folder where to look for scripts"}),"\n",(0,r.jsxs)(s.p,{children:["You can look in the ",(0,r.jsx)(s.a,{href:"./",children:"intro"})," to see how to generate the dvdrental code\nused in these example snippets."]}),"\n",(0,r.jsxs)(s.p,{children:["You can even have ",(0,r.jsx)(s.code,{children:".sql"})," file scripts that will generate typed wrappers."]}),"\n",(0,r.jsxs)(s.p,{children:["Make a file ",(0,r.jsx)(s.code,{children:"./src/sql/pick.sql"}),". Notice the use of Postgres style parameters with ",(0,r.jsx)(s.code,{children:"$number"}),"\nwhere ",(0,r.jsx)(s.code,{children:"number"})," is one based."]}),"\n",(0,r.jsx)(c.Z,{language:"sql",title:"./src/sql/pick.sql",children:"\nSELECT\n    *\nFROM\n    public.film\nWHERE\n    title = $1\n"}),"\n",(0,r.jsxs)(s.p,{children:["Generate some code -- notice the ",(0,r.jsx)(s.code,{children:"--sqlScriptsFrom"})," switch."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"mkdir -p ./src\nnpx embracesqlcli generate node --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./src/sql > ./src/dvdrental.ts\n\n"})}),"\n",(0,r.jsx)(s.p,{children:"And call your SQL script as a strongly typed function"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'import { Database } from "./src/dvdrental";\n\nconst db = await Database.connect(\n  "postgres://postgres:postgres@localhost:5432/dvdrental",\n);\nconst value = await db.Scripts.Sample.pick({ _1: "Basic Easy" });\nawait db.disconnect();\n'})})]})}function h(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);