"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9771],{5595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>b});var a=t(5893),r=t(1151);const o='"use client";\n\nimport {\n  EmbraceSQLClient,\n  EmbraceSQLProvider,\n  Public,\n} from "../../client/dvdrental-react";\n\nfunction Index() {\n  // you can read along any index -- want to new way to get data\n  // from your table auto-generated? -- make an index, it\'ll be fast\n  // and all the code to use it will be generated\n  const { rows } = Public.Tables.Actor.useIdxActorLastName(\n    // and query\n    {\n      lastName: "Akroyd",\n    },\n    // using sort and pagination - on top of reading by index\n    {\n      // showing the first page\n      offsetNumberOfRows: 0,\n      limitNumberOfRows: 2,\n      sort: [Public.Tables.Actor.SortOptions.firstNameAscending],\n    },\n  );\n\n  if (rows) {\n    // old school - let\'s make a table - EmbraceSQL generates column\n    // name metadata based on the table schemas which makes it easy to iterate\n    return (\n      <table>\n        <thead>\n          <tr>\n            {Public.Tables.Actor.ColumnNames.map((c) => (\n              <th key={c}>{c}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((r) => (\n            <tr key={r.rowNumberInResultset}>\n              {Public.Tables.Actor.ColumnNames.map((c) => (\n                <td key={c}>{`${r[\n                  Public.Tables.Actor.Columns[c].fieldName\n                ].toLocaleString()}`}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default function Page() {\n  // connect to where we mounted EmbraceSQL in our server\n  const client = new EmbraceSQLClient({\n    url: `/embracesql`,\n  });\n  // set up the EmbraceSQL context\n  return (\n    <EmbraceSQLProvider client={client}>\n      <Index />\n    </EmbraceSQLProvider>\n  );\n}\n';var s=t(9286),c=t(1430);const i={},l="Database Table by Index",d={id:"React/Cookbook/by_index",title:"Database Table by Index",description:"Sometimes you just want just a few rows, and you want it fast.",source:"@site/docs/React/Cookbook/by_index.mdx",sourceDirName:"React/Cookbook",slug:"/React/Cookbook/by_index",permalink:"/docs/React/Cookbook/by_index",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cookbook \ud83e\uddd1\u200d\ud83c\udf73",permalink:"/docs/React/Cookbook/"},next:{title:"Stored Procedure",permalink:"/docs/React/Cookbook/procedure"}},u={},b=[{value:"Requirements",id:"requirements",level:2},{value:"Steps",id:"steps",level:2},{value:"Generate Code",id:"generate-code",level:3},{value:"Code React",id:"code-react",level:3}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"database-table-by-index",children:"Database Table by Index"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes you just want just a few rows, and you want it fast."}),"\n",(0,a.jsxs)(n.p,{children:["EmbraceSQL generates a ",(0,a.jsx)(n.code,{children:"useRows"})," hook for every index on every table."]}),"\n",(0,a.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(n.p,{children:["Make sure you are read as specified in the ",(0,a.jsx)(n.a,{href:"./",children:"Cookbook"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,a.jsx)(n.h3,{id:"generate-code",children:"Generate Code"}),"\n",(0,a.jsx)(n.p,{children:"Now that there is a SQL Script - regenerate from the database. If you are already\nrunning NextJS, it'll hot reload."}),"\n",(0,a.jsx)(s.Z,{language:"shell",children:c.Z}),"\n",(0,a.jsx)(n.h3,{id:"code-react",children:"Code React"}),"\n",(0,a.jsx)(n.p,{children:"Now use a table hook. Note the options to paginate and sort."}),"\n",(0,a.jsx)(s.Z,{language:"tsx",title:"src/app/by_index/page.tsx",children:o})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},1430:(e,n,t)=>{t.d(n,{Z:()=>a});const a="#!/usr/bin/env bash\n\nmkdir -p src/server\nnpx embracesqlcli generate node --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/server/dvdrental.ts\n\nmkdir -p src/client\nnpx embracesqlcli generate react --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/client/dvdrental-react.ts"}}]);