"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3382],{2532:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var s=n(5893),i=n(1151);const a='import { Public } from "./checklist-react";\nimport { Toolbar } from "./checklists";\nimport DeleteIcon from "@mui/icons-material/Delete";\nimport { DataGrid, GridActionsCellItem, GridColDef } from "@mui/x-data-grid";\n\ntype Props = {\n  // we can use the exact type generated from the database complete with autocomplete\n  // no need to \'keep types in sync\' - just embrace the database!\n  checklistId: Public.Tables.Checklist.Row["id"];\n};\n\n/**\n * A data grid displaying data bound to the `checklist_item` table via EmbraceSQL.\n */\nexport function ChecklistItems({ checklistId }: Props) {\n  // data hooked to the checklist id\n  const { rows, addRow, updateRow, deleteRow } =\n    Public.Tables.ChecklistItem.useByChecklistId({ checklistId });\n\n  // named items with a \'check off\'\n  const columns: GridColDef<Public.Tables.ChecklistItem.Row>[] = [\n    {\n      field: "checked",\n      headerName: "\u2714",\n      flex: 1,\n      editable: true,\n      type: "boolean",\n    },\n    {\n      field: "title",\n      headerName: "Title",\n      flex: 2,\n      editable: true,\n    },\n    {\n      field: "createdAt",\n      headerName: "Created",\n      flex: 1,\n      editable: false,\n      type: "date",\n    },\n    {\n      // action buttons in each row\n      field: "actions",\n      type: "actions",\n      headerName: "",\n      getActions: (gridRow) => {\n        // deleting, just like in `Checklists`.\n        return [\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label="Delete"\n            onClick={() => {\n              void deleteRow(gridRow.row.rowNumberInResultset);\n            }}\n            color="inherit"\n          />,\n        ];\n      },\n    },\n  ];\n  return (\n    <DataGrid\n      hideFooter={true}\n      columns={columns}\n      rows={rows}\n      slots={{\n        // re-use our toolbar from `Checklists`\n        toolbar: Toolbar,\n      }}\n      slotProps={{\n        toolbar: {\n          // add a row via the hook -- EmbraceSQL will automatically parent\n          // to the right checklistId because it knows that is how it\n          // read the rows \ud83e\ude84\n          handleClick: addRow,\n        },\n      }}\n      getRowId={(row) => {\n        // MUI grid row level \'id\' as in `Checklists`\n        return row.rowNumberInResultset;\n      }}\n      processRowUpdate={async (updatedRow, originalRow) => {\n        // save via the hook\n        return await updateRow(originalRow.rowNumberInResultset, updatedRow);\n      }}\n    ></DataGrid>\n  );\n}\n';var o=n(9286);const l={},r="Create Items",c={id:"React/Checklist Example/items",title:"Create Items",description:"Now we'll associate a parent Checklist with ChecklistItems.",source:"@site/docs/React/Checklist Example/05-items.mdx",sourceDirName:"React/Checklist Example",slug:"/React/Checklist Example/items",permalink:"/docs/React/Checklist Example/items",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Checklists",permalink:"/docs/React/Checklist Example/checklists"},next:{title:"AutoCRUD",permalink:"/docs/autocrud"}},d={},h=[{value:"Steps",id:"steps",level:2},{value:"Create a ChecklistsItem Component",id:"create-a-checklistsitem-component",level:3}];function m(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"create-items",children:"Create Items"}),"\n",(0,s.jsx)(t.p,{children:"Now we'll associate a parent Checklist with ChecklistItems.\nEmbraceSQL makes this easy with automatically generated hooks."}),"\n",(0,s.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(t.h3,{id:"create-a-checklistsitem-component",children:"Create a ChecklistsItem Component"}),"\n",(0,s.jsxs)(t.p,{children:["We're using another grid to ",(0,s.jsx)(t.em,{children:"CRUD"})," ChecklistItems. The read operation is hooked\nto a prop that is the parent Checklist ",(0,s.jsx)(t.code,{children:"id"}),"."]}),"\n",(0,s.jsx)(o.Z,{language:"tsx",title:"./src/client/checklistitems.tsx",children:a})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);