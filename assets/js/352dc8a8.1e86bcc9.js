"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3666],{3642:(e,n,s)=>{s.d(n,{ZP:()=>o});var r=s(5893),t=s(1151);function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsx)(n.p,{children:"You are going to need:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"NodeJs >= 18"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL >= 14"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These examples assume you are running locally with your shell able to connect\nto your PostgreSQL with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"psql\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a new database ",(0,r.jsx)(n.code,{children:"dvdrental"})," on your local PostgeSQL server."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl "https://embracesql.github.io/dvdrental.sql" | psql\n'})})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},2056:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=s(5893),t=s(1151),a=s(3642),o=s(3871),l=s(1430),c=s(9286);const i={},d="Cookbook \ud83e\uddd1\u200d\ud83c\udf73",p={id:"React/Cookbook/index",title:"Cookbook \ud83e\uddd1\u200d\ud83c\udf73",description:"What's an API guide without a cookbook? In here you will find recipes for",source:"@site/docs/React/Cookbook/index.mdx",sourceDirName:"React/Cookbook",slug:"/React/Cookbook/",permalink:"/docs/React/Cookbook/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Items",permalink:"/docs/React/Checklist Example/items"},next:{title:"Database Table by Index",permalink:"/docs/React/Cookbook/by_index"}},h={},u=[{value:"NextJS",id:"nextjs",level:2},{value:"Steps",id:"steps",level:2},{value:"Add EmbraceSQL",id:"add-embracesql",level:3},{value:"Generate Code",id:"generate-code",level:3},{value:"Create a Server",id:"create-a-server",level:3}];function x(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"cookbook-",children:"Cookbook \ud83e\uddd1\u200d\ud83c\udf73"}),"\n",(0,r.jsx)(n.p,{children:"What's an API guide without a cookbook? In here you will find recipes for\ncommon database use cases."}),"\n",(0,r.jsx)(n.p,{children:"The examples are coded up as stand alone NextJS pages. Client only examples\nwill convert well to ViteJS."}),"\n",(0,r.jsx)(a.ZP,{}),"\n",(0,r.jsx)(n.h2,{id:"nextjs",children:"NextJS"}),"\n",(0,r.jsx)(n.p,{children:"You are going to need:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"NextJS >= 14"}),"\n",(0,r.jsx)(n.li,{children:"An AppRouter application"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(n.p,{children:"This will set up your NextJS to be able to use EmbraceSQL."}),"\n",(0,r.jsx)(n.h3,{id:"add-embracesql",children:"Add EmbraceSQL"}),"\n",(0,r.jsx)(n.p,{children:"Package ahoy! \ud83d\udea2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm install @embracesql/shared\nnpm install @embracesql/react\n"})}),"\n",(0,r.jsx)(n.h3,{id:"generate-code",children:"Generate Code"}),"\n",(0,r.jsx)(n.p,{children:"Generate code, note that we have a command line switch to look for SQL\nscripts in a designated folder."}),"\n",(0,r.jsx)(c.Z,{language:"shell",children:l.Z}),"\n",(0,r.jsx)(n.h3,{id:"create-a-server",children:"Create a Server"}),"\n",(0,r.jsx)(n.p,{children:"Here is a route handler that will connect the server-side part of your NextJS\napplication directly to your PostgreSQL, and expose it to the client-side part."}),"\n",(0,r.jsx)(c.Z,{language:"typescript",title:"./src/app/embracesql/route.ts",children:o.Z})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},1430:(e,n,s)=>{s.d(n,{Z:()=>r});const r="#!/usr/bin/env bash\n\nmkdir -p src/server\nnpx embracesqlcli generate node --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/server/dvdrental.ts\n\nmkdir -p src/client\nnpx embracesqlcli generate react --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/client/dvdrental-react.ts"},3871:(e,n,s)=>{s.d(n,{Z:()=>r});const r='import { OperationDispatcher, Database } from "../../server/dvdrental";\nimport { EmbraceSQLRequest, EmbraceSQLResponse } from "@embracesql/shared";\n\n/**\n * Connect next app route to EmbraceSQL with a plain\n * PostgreSQL connection url.\n */\nfunction embraceSQL(postgresUrl: string) {\n  let database: Database;\n  return async (req: Request) => {\n    // do we already have a connection\n    if (!database) {\n      database = await Database.connect(postgresUrl);\n    }\n    // dispatcher finds the right method for a request\n    const dispatcher = new OperationDispatcher(database);\n    try {\n      // do we have a valid request?\n      const request: EmbraceSQLRequest<object, object> = await req.json();\n      if (!request.operation && !(request.parameters || request.values)) {\n        throw new Error("Invalid Request");\n      }\n      // now we are \ud83e\udd58\n      const results = await dispatcher.dispatch(request);\n      const response: EmbraceSQLResponse<unknown> = {\n        operation: request.operation,\n        headers: request.headers ?? {},\n        results,\n      };\n      return Response.json(response);\n    } catch (e) {\n      return new Response((e as Error)?.message, { status: 400 });\n    }\n  };\n}\n\n/**\n * NextJS POST route connection.\n */\nexport const POST = embraceSQL(\n  "postgres://postgres:postgres@localhost/dvdrental",\n);\n'}}]);