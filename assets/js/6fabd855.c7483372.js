"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1923],{9102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var i=n(5893),a=n(1151);const o='import { Public } from "./checklist-react";\nimport AddIcon from "@mui/icons-material/Add";\nimport DeleteIcon from "@mui/icons-material/Delete";\nimport { Button } from "@mui/material";\nimport {\n  DataGrid,\n  GridActionsCellItem,\n  GridColDef,\n  GridToolbarContainer,\n} from "@mui/x-data-grid";\n\n/**\n * Need a way to add some rows, here is a toolbar with an Add button.\n */\nexport function Toolbar({ handleClick = () => {} }) {\n  return (\n    <GridToolbarContainer>\n      <Button color="primary" startIcon={<AddIcon />} onClick={handleClick}>\n        Add\n      </Button>\n    </GridToolbarContainer>\n  );\n}\n\ntype Props = {\n  // selection event, notice we can re-use the row type -- no need\n  // for additional data models -- and if we happen to add columns to\n  // the `checklist` table -- they will show up here automatically on regeneration!\n  onChecklistSelected: (checklist: Public.Tables.Checklist.Row) => void;\n};\n\n/**\n * A data grid displaying data bound to to the `checklist` table via EmbraceSQL.\n */\nexport function Checklists({ onChecklistSelected }: Props) {\n  // fetching data is a one call, using the client database connection via context\n  const { rows, addRow, updateRow, deleteRow } =\n    Public.Tables.Checklist.useRows();\n\n  // config for the MUI grid, here just showing the columns with user data,\n  // hiding the id key, and row level action buttons\n  const columns: GridColDef<Public.Tables.Checklist.Row>[] = [\n    {\n      field: "name",\n      headerName: "Name",\n      flex: 2,\n      // here is what you are really editing in the grid\n      editable: true,\n    },\n    {\n      field: "createdAt",\n      headerName: "Created",\n      flex: 1,\n      // doesn\'t really make sense to edit a create date\n      // this will show us how values defaulted from the database\n      editable: false,\n      type: "date",\n    },\n    {\n      // action buttons in each row\n      field: "actions",\n      type: "actions",\n      headerName: "",\n      getActions: (gridRow) => {\n        // deleting a row from the hooked rows is just - pass the row number\n        // the in memory update is processed in React as well as in the database\n        return [\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label="Delete"\n            onClick={() => {\n              // deleting is just -- pass the row number you want to delete to the hook\n              void deleteRow(gridRow.row.rowNumberInResultset);\n            }}\n            color="inherit"\n          />,\n        ];\n      },\n    },\n  ];\n  return (\n    <DataGrid\n      hideFooter={true}\n      columns={columns}\n      rows={rows}\n      slots={{\n        toolbar: Toolbar,\n      }}\n      slotProps={{\n        toolbar: { handleClick: addRow },\n      }}\n      onRowClick={(params) => {\n        // row click even turns into a checklist selection\n        // notice how the types line up nicely\n        onChecklistSelected(params.row);\n      }}\n      getRowId={(row) => {\n        // The MUI grid requires an \'id\' for each row\n        // but -- our new rows won\'t have an id yet, becuase they are blank!\n        // And to top it off the database will be allocating the UUID -\n        // so this makes using \'the database key\' impossible.\n        // So we provide a nice row number as a \'unique\' identifier for the UI\n        // Think UI Grid -> in memory array of rows -> database table\n        return row.rowNumberInResultset;\n      }}\n      processRowUpdate={async (updatedRow, originalRow) => {\n        // when you are done editing a row, it is time to save it\n        // simply pass the now complete row to the hook\n        return await updateRow(originalRow.rowNumberInResultset, updatedRow);\n      }}\n    ></DataGrid>\n  );\n}\n';var s=n(9286);const l={},r="Create Checklists",c={id:"React/Checklist Example/checklists",title:"Create Checklists",description:"Our app is a classic todo-list, with the extra feature of being a list",source:"@site/docs/React/Checklist Example/04-checklists.mdx",sourceDirName:"React/Checklist Example",slug:"/React/Checklist Example/checklists",permalink:"/docs/React/Checklist Example/checklists",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Client",permalink:"/docs/React/Checklist Example/client"},next:{title:"Create Items",permalink:"/docs/React/Checklist Example/items"}},d={},h=[{value:"Steps",id:"steps",level:2},{value:"Create a Checklists Component",id:"create-a-checklists-component",level:3}];function u(e){const t={em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"create-checklists",children:"Create Checklists"}),"\n",(0,i.jsx)(t.p,{children:"Our app is a classic todo-list, with the extra feature of being a list\nof todo lists. At the top level are Checklists, which contain Checklist Items -\nclassic parent child."}),"\n",(0,i.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(t.h3,{id:"create-a-checklists-component",children:"Create a Checklists Component"}),"\n",(0,i.jsx)(t.p,{children:"Here we as using a grid to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"add a new Checklist"}),"\n",(0,i.jsx)(t.li,{children:"display all the Checklists"}),"\n",(0,i.jsx)(t.li,{children:"change the name of a Checklist"}),"\n",(0,i.jsx)(t.li,{children:"delete a Checklist"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"C R U D"})," in a Grid!"]}),"\n",(0,i.jsx)(s.Z,{language:"tsx",title:"./src/client/checklists.tsx",children:o})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);