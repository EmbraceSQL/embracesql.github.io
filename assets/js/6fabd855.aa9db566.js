"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1923],{9102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var i=n(5893),s=n(1151);const a='import { Public } from "./checklist-react";\nimport AddIcon from "@mui/icons-material/Add";\nimport DeleteIcon from "@mui/icons-material/Delete";\nimport { Button, IconButton, TextField } from "@mui/material";\nimport Grid from "@mui/material/Unstable_Grid2";\n\ntype Props = {\n  // selection event, notice we can re-use the row type -- no need\n  // for additional data models -- and if we happen to add columns to\n  // the `checklist` table -- they will show up here automatically on regeneration!\n  onChecklistSelected: (checklist: Public.Tables.Checklist.Row) => void;\n};\n\n/**\n * A data grid displaying data bound to to the `checklist` table via EmbraceSQL.\n */\nexport function Checklists({ onChecklistSelected }: Props) {\n  // fetching data is a one call, using the client database connection via context\n  const { rows, addRow, deleteRow } = Public.Tables.Checklist.useRows();\n\n  return (\n    // just a single editable text field -- EmbraceSQL has automatic saving\n    // for text fields, debounced on change as the user types - values go\n    // to the databse\n    <Grid container spacing={1}>\n      {rows.map((row) => {\n        return (\n          <Grid\n            key={row.rowNumberInResultset}\n            xs={12}\n            container\n            onClick={() => onChecklistSelected(row)}\n          >\n            <Grid xs={11}>\n              <TextField\n                variant="standard"\n                value={row.name}\n                label={row.name ? " " : "Name your list..."}\n                onChange={row.changeName}\n                fullWidth\n                helperText={\n                  row.createdAt\n                    ? `Created: ${row.createdAt.toLocaleDateString()}`\n                    : ` `\n                }\n              />\n            </Grid>\n            <Grid\n              xs={1}\n              sx={{\n                display: "flex",\n                justifyContent: "center",\n                alignItems: "center",\n              }}\n            >\n              <IconButton\n                onClick={() => void deleteRow(row.rowNumberInResultset)}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        );\n      })}\n      <Grid container>\n        <Grid>\n          <Button\n            color="primary"\n            startIcon={<AddIcon />}\n            onClick={() => void addRow()}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n';var l=n(9286);const c={},r="Create Checklists",o={id:"React/Checklist Example/checklists",title:"Create Checklists",description:"Our app is a classic todo-list, with the extra feature of being a list",source:"@site/docs/React/Checklist Example/04-checklists.mdx",sourceDirName:"React/Checklist Example",slug:"/React/Checklist Example/checklists",permalink:"/docs/React/Checklist Example/checklists",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Client",permalink:"/docs/React/Checklist Example/client"},next:{title:"Create Items",permalink:"/docs/React/Checklist Example/items"}},d={},h=[{value:"Steps",id:"steps",level:2},{value:"Create a Checklists Component",id:"create-a-checklists-component",level:3}];function u(e){const t={em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"create-checklists",children:"Create Checklists"}),"\n",(0,i.jsx)(t.p,{children:"Our app is a classic todo-list, with the extra feature of being a list\nof todo lists. At the top level are Checklists, which contain Checklist Items -\nclassic parent child."}),"\n",(0,i.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(t.h3,{id:"create-a-checklists-component",children:"Create a Checklists Component"}),"\n",(0,i.jsx)(t.p,{children:"Here we as using a grid to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"add a new Checklist"}),"\n",(0,i.jsx)(t.li,{children:"display all the Checklists"}),"\n",(0,i.jsx)(t.li,{children:"change the name of a Checklist"}),"\n",(0,i.jsx)(t.li,{children:"delete a Checklist"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"C R U D"})," in a Grid!"]}),"\n",(0,i.jsx)(l.Z,{language:"tsx",title:"./src/client/checklists.tsx",children:a})]})}function m(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);