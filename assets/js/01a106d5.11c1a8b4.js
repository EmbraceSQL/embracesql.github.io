"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6295],{9734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var r=t(5893),s=t(1151);const a={},c="React",o={id:"react",title:"React",description:"EmbraceSQL generates support for React using hooks. The hooks:",source:"@site/docs/react.md",sourceDirName:".",slug:"/react",permalink:"/docs/react",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Problems",permalink:"/docs/problems"},next:{title:"Routes & Handlers",permalink:"/docs/routes"}},l={},i=[{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"react",children:"React"}),"\n",(0,r.jsx)(n.p,{children:"EmbraceSQL generates support for React using hooks. The hooks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Connect to any HTTP/S EmbraceSQL server endpoint"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, Update, Delete, and Refresh data (CRUD-R)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["You can look in the ",(0,r.jsx)(n.a,{href:"/docs/",children:"intro"})," to see how to generate the dvdrental code\nused in these example snippets. Make sure you have a dvdrental database created."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm install @embracesql/vite\n"})}),"\n",(0,r.jsx)(n.p,{children:"Yeah -- that's it, hard to believe I know... just a little more to make\nyour sample a module so we can use top level await:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"package.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "module", \n  "dependencies": {\n    "@embracesql/vite": "*"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And we provide a typescript preset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"tsconfig.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "extends": "@embracesql/shared/tsconfig/react.tsconfig.json"\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now it is time to generate the EmbraceSQL express server application."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mkdir -p src/server\nnpx embracesql generate express --database postgres://postgres:postgres@localhost/dvdrental > ./src/server/dvdrental.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"And update the express server entry point:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"./src/server/main.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'\nimport { EmbraceSQLExpressApp } from "./dvdrental";\nimport { EmbraceViteApp } from "@embracesql/vite";\nimport express from "express";\n\nconst app = express();\n\n// hook embracesql middleware first\nconst embracesql = await EmbraceSQLExpressApp(\n  "postgres://postgres:postgres@localhost/dvdrental",\n);\napp.use("/embracesql", embracesql);\n// and then hook in vite\nconst vite = await EmbraceViteApp();\napp.use("/", vite);\n\napp.listen(3000, () => console.log("Server is listening on port 3000..."));\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Make sure the server starts -- this will even hot reload the server -- and\nweb page we're about to build."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npx tsx watch ./src/server/main.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"And check for some data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -X POST http://localhost:3000/embracesql \\\n   -H \'Content-Type: application/json\' \\\n   -d \'{"operation":"Public.Actor.byActorId","parameters":{"actorId": 1}}\'\n'})}),"\n",(0,r.jsx)(n.p,{children:"At this point, if you are getting data -- it's time to make a react app!"}),"\n",(0,r.jsx)(n.p,{children:"Generate the client side, react hook code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mkdir -p src/client\nnpx embracesql generate react --database postgres://postgres:postgres@localhost/dvdrental > ./src/client/dvdrental-react.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here is a super minimal React application to get you a single Actor\nfrom the database, and allow saving to the database without you writing\na line of SQL, or additional schema, or even a server."}),"\n",(0,r.jsx)(n.p,{children:"Gonna need an html page entry point"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"index.html"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Hello EmbraceSQL</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/client/main.tsx"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"./src/client/main.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import React from "react";\nimport * as ReactDOM from "react-dom/client";\nimport { EmbraceSQLClient, EmbraceSQLProvider, Public } from "./dvdrental-react";\n\nconst client = new EmbraceSQLClient({\n  url: "http://localhost:3000/embracesql",\n});\n\n\nconst App = () => {\n    // this is hooking to an AutoCRUD method to read an actor\n    const {loading, results: actor, error, refresh} = Public.Tables.Actor.useByActorId({ actorId: 1 });\n    // \ud83e\ude84 - automatic onChange saving though the hook, with debounce to not smoke your DB!\n    return <div>\n        <input value={actor.firstName} onChange={actor.firstName}/>\n        <input value={actor.lastName} onChange={actor.lastName}/>\n    </div>\n}\n\n// Supported in React 18+\nconst root = ReactDOM.createRoot(document.getElementById("root"));\n\nroot.render(\n  <EmbraceSQLProvider client={client}>\n    <App />\n  </EmbraceSQLProvider>,\n);\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"TODO - react app root html"}),"\n",(0,r.jsx)(n.p,{children:"TODO - run with vite npx"})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);