"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4965],{3199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>b,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var r=n(5893),a=n(1151);const s='"use client";\n\nimport {\n  EmbraceSQLClient,\n  EmbraceSQLProvider,\n  Public,\n  PgCatalog,\n} from "../../client/dvdrental-react";\nimport { useDebouncedValue, useOnChange } from "@embracesql/react";\n\nfunction Procedure() {\n  // event hook\n  const { value, onChange } = useOnChange(PgCatalog.Types.Date.parse);\n  // debounce, this is a good way to not clobber the database as a user types\n  const debouncedValue = useDebouncedValue(value);\n  // database talks in \'NULL\' not \'undefined\'\n  const { results } = Public.Procedures.LastDay.useLastDay({\n    argument_0: debouncedValue ?? null,\n  });\n  return (\n    <div style={{ display: "flex", flexDirection: "row", width: "32em" }}>\n      <input type="date" style={{ flex: 1 }} onChange={onChange}></input>\n      <div style={{ flex: 3 }}>\n        {results ? `Last Day ${results.toISOString()}` : ``}\n      </div>\n    </div>\n  );\n}\n\nexport default function Page() {\n  // connect to where we mounted EmbraceSQL in our server\n  const client = new EmbraceSQLClient({\n    url: `/embracesql`,\n  });\n  // set up the EmbraceSQL context\n  return (\n    <EmbraceSQLProvider client={client}>\n      <Procedure />\n    </EmbraceSQLProvider>\n  );\n}\n';var o=n(9286),d=n(1430);const c={},l="Stored Procedure",i={id:"React/Cookbook/procedure",title:"Stored Procedure",description:"You can use stored procedures in your database as the database API. This is",source:"@site/docs/React/Cookbook/procedure.mdx",sourceDirName:"React/Cookbook",slug:"/React/Cookbook/procedure",permalink:"/docs/React/Cookbook/procedure",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Database Table by Index",permalink:"/docs/React/Cookbook/by_index"},next:{title:"SQL Script Report",permalink:"/docs/React/Cookbook/report"}},u={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Steps",id:"steps",level:2},{value:"Write a Stored Procedure",id:"write-a-stored-procedure",level:3},{value:"Generate Code",id:"generate-code",level:3},{value:"Code React",id:"code-react",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"stored-procedure",children:"Stored Procedure"}),"\n",(0,r.jsxs)(t.p,{children:["You can use stored procedures in your database as ",(0,r.jsx)(t.em,{children:"the database API"}),". This is\na strange concept for folks that grew up with the database as a place where\nobjects go to rest when not in memory -- mere storage. But to folks that embrace\nSQL, the database is a valid active player in your architecture."]}),"\n",(0,r.jsx)(t.p,{children:"EmbraceSQL generates code to call all stored procedures in the database, along\nwith React hooks to call stored procedures from the UI, through an EmbraceSQL\ngenerated REST server, to the database, and back again. And you don't have to\ncode any of it."}),"\n",(0,r.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(t.p,{children:["Make sure you are read as specified in the ",(0,r.jsx)(t.a,{href:"./",children:"Cookbook"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(t.h3,{id:"write-a-stored-procedure",children:"Write a Stored Procedure"}),"\n",(0,r.jsxs)(t.p,{children:["Here is a stored procedure example from the ",(0,r.jsx)(t.a,{target:"_blank",href:n(4201).Z+"",children:"dvdrental"}),"\ndatabase. Pure API, it's even stateless in that it doesn't store data."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"CREATE FUNCTION public.last_day(timestamp without time zone) RETURNS date\n    LANGUAGE sql IMMUTABLE STRICT\n    AS $_$\n    SELECT\n        CASE WHEN EXTRACT(MONTH FROM $1) = 12 THEN\n(((EXTRACT(YEAR FROM $1) + 1)\n                    OPERATOR(pg_catalog. ||) '-01-01')::date - INTERVAL '1 day')::date\n        ELSE\n((EXTRACT(YEAR FROM $1)\n                    OPERATOR(pg_catalog. ||) '-' OPERATOR(pg_catalog. ||)(EXTRACT(MONTH FROM $1) + 1)\n                    OPERATOR(pg_catalog. ||) '-01')::date - INTERVAL '1 day')::date\n        END\n$_$;\n\n\nALTER FUNCTION public.last_day(timestamp without time zone) OWNER TO postgres;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"generate-code",children:"Generate Code"}),"\n",(0,r.jsx)(t.p,{children:"Regenerate from the database. If you are already running NextJS, it'll hot reload."}),"\n",(0,r.jsx)(o.Z,{language:"shell",children:d.Z}),"\n",(0,r.jsx)(t.h3,{id:"code-react",children:"Code React"}),"\n",(0,r.jsx)(t.p,{children:"Import the generated hook."}),"\n",(0,r.jsx)(t.p,{children:"EmbraceSQL includes database friendly utilities including type parsers and\nreact utility hooks to capture UI changes."}),"\n",(0,r.jsx)(o.Z,{language:"tsx",title:"src/app/procedure/page.tsx",children:s})]})}function b(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},4201:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/dvdrental-4d6577857fddaf4cb22828b45f57ee97.sql"},1430:(e,t,n)=>{n.d(t,{Z:()=>r});const r="#!/usr/bin/env bash\n\nmkdir -p src/server\nnpx embracesqlcli generate node --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/server/dvdrental.ts\n\nmkdir -p src/client\nnpx embracesqlcli generate react --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/client/dvdrental-react.ts"}}]);