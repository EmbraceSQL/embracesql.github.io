"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1258],{7997:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>h,default:()=>b,frontMatter:()=>d,metadata:()=>m,toc:()=>u});var a=t(5893),i=t(1151);const r='<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>EmbraceSQL Checklist</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/client/main.tsx"><\/script>\n  </body>\n</html>\n',o='import { App } from "./app";\nimport { EmbraceSQLClient, EmbraceSQLProvider } from "./checklist-react";\nimport { Box, Container, ThemeProvider, createTheme } from "@mui/material";\nimport React from "react";\nimport * as ReactDOM from "react-dom/client";\n\n// connect to where we mounted EmbraceSQL in our server\nconst client = new EmbraceSQLClient({\n  url: `${window.location.href}embracesql`,\n});\n\nconst theme = createTheme({});\n\n// whole application is wrapped in a provider to allow data access in any component\n// the main layout is the default theme and a nice center column\nReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(\n  <EmbraceSQLProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <Container maxWidth="md">\n        <Box sx={{ height: "100vh" }}>\n          <App />\n        </Box>\n      </Container>\n    </ThemeProvider>\n  </EmbraceSQLProvider>,\n);\n',l='import { Checklists } from "./checklists";\nimport { Box } from "@mui/material";\n\n/**\n * Our simple application, controls our view transitions.\n */\nexport function App() {\n  return (\n    <Box sx={{ height: "100%" }}>\n      <Checklists />\n    </Box>\n  );\n}\n',s='import { Public } from "./checklist-react";\nimport AddIcon from "@mui/icons-material/Add";\nimport DeleteIcon from "@mui/icons-material/Delete";\nimport { Button } from "@mui/material";\nimport {\n  DataGrid,\n  GridActionsCellItem,\n  GridColDef,\n  GridToolbarContainer,\n} from "@mui/x-data-grid";\n\n/**\n * Need a way to add some rows, here is a toolbar with an Add button.\n */\nexport function Toolbar({ handleClick = () => {} }) {\n  return (\n    <GridToolbarContainer>\n      <Button color="primary" startIcon={<AddIcon />} onClick={handleClick}>\n        Add record\n      </Button>\n    </GridToolbarContainer>\n  );\n}\n\n/**\n * A data grid displaying data bound to to the `checklist` table via EmbraceSQL.\n */\nexport function Checklists() {\n  // fetching data is a one call, using the client database connection via context\n  const { rows, addRow, updateRow, deleteRow } =\n    Public.Tables.Checklist.useRows();\n\n  // config for the MUI grid, here just showing the columns with user data,\n  // hiding the id key, and row level action buttons\n  const columns: GridColDef<Public.Tables.Checklist.Row>[] = [\n    {\n      field: "name",\n      headerName: "Name",\n      flex: 4,\n      // here is what you are really editing in the grid\n      editable: true,\n    },\n    {\n      field: "createdAt",\n      headerName: "Created",\n      flex: 1,\n      // doesn\'t really make sense to edit a create date\n      // this will show us how values defaulted from the database\n      editable: false,\n    },\n    {\n      // action buttons in each row\n      field: "actions",\n      type: "actions",\n      headerName: "",\n      getActions: (gridRow) => {\n        // deleting a row from the hooked rows is just - pass the row number\n        // the in memory update is processed in React as well as in the database\n        return [\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label="Delete"\n            onClick={() => {\n              // deleting is just -- pass the row number you want to delete\n              // to the hook\n              void deleteRow(gridRow.row.rowNumberInResultset);\n            }}\n            color="inherit"\n          />,\n        ];\n      },\n    },\n  ];\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      slots={{\n        toolbar: Toolbar,\n      }}\n      slotProps={{\n        toolbar: { handleClick: addRow },\n      }}\n      getRowId={(row) => {\n        // The MUI grid requires an \'id\' for each row\n        // but -- our new rows won\'t have an id yet, becuase they are blank!\n        // And to top it off the database will be allocating the UUID -\n        // so this makes using \'the database key\' impossible.\n        // So we provide a nice row number as a \'unique\' identifier for the UI\n        // Think UI Grid -> in memory array of rows -> database table\n        return row.rowNumberInResultset;\n      }}\n      processRowUpdate={async (updatedRow, originalRow) => {\n        // when you are done editing a row, it is time to save it\n        // simply pass the now complete row to the hook\n        return await updateRow(originalRow.rowNumberInResultset, updatedRow);\n      }}\n    ></DataGrid>\n  );\n}\n';var c=t(9286);const d={},h="Create a Client",m={id:"React/Checklist Example/client",title:"Create a Client",description:"Now we can create a react UI.",source:"@site/docs/React/Checklist Example/03-client.mdx",sourceDirName:"React/Checklist Example",slug:"/React/Checklist Example/client",permalink:"/docs/React/Checklist Example/client",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create a Server",permalink:"/docs/React/Checklist Example/server"},next:{title:"AutoCRUD",permalink:"/docs/autocrud"}},p={},u=[{value:"Steps",id:"steps",level:2},{value:"Get MUI",id:"get-mui",level:3},{value:"Create App HTML",id:"create-app-html",level:3},{value:"Create a React Main",id:"create-a-react-main",level:3},{value:"Create a React App",id:"create-a-react-app",level:3},{value:"Create a Checklists Component",id:"create-a-checklists-component",level:3}];function w(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"create-a-client",children:"Create a Client"}),"\n",(0,a.jsx)(n.p,{children:"Now we can create a react UI."}),"\n",(0,a.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,a.jsx)(n.h3,{id:"get-mui",children:"Get MUI"}),"\n",(0,a.jsx)(n.p,{children:"In our app directory, we need to add a few packages to get the MUI toolkit:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"npm install @mui/material @emotion/react @emotion/styled @mui/x-data-grid @mui/icons-material\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-app-html",children:"Create App HTML"}),"\n",(0,a.jsx)(n.p,{children:"We're making a single page app, so here is the single page."}),"\n",(0,a.jsx)(c.Z,{language:"html",title:"index.html",children:r}),"\n",(0,a.jsx)(n.h3,{id:"create-a-react-main",children:"Create a React Main"}),"\n",(0,a.jsxs)(n.p,{children:["Create the application root as shown. This will be loaded by ",(0,a.jsx)(n.code,{children:"index.html"}),"."]}),"\n",(0,a.jsx)(c.Z,{language:"tsx",title:"./src/client/main.tsx",children:o}),"\n",(0,a.jsx)(n.h3,{id:"create-a-react-app",children:"Create a React App"}),"\n",(0,a.jsx)(n.p,{children:"A very simple app at the root."}),"\n",(0,a.jsx)(c.Z,{language:"tsx",title:"./src/client/app.tsx",children:l}),"\n",(0,a.jsx)(n.h3,{id:"create-a-checklists-component",children:"Create a Checklists Component"}),"\n",(0,a.jsx)(n.p,{children:"Using a grid to display all the checklists."}),"\n",(0,a.jsx)(c.Z,{language:"tsx",title:"./src/client/checklists.tsx",children:s})]})}function b(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(w,{...e})}):w(e)}}}]);