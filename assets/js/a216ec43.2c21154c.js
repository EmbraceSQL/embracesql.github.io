"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1258],{4525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>x,frontMatter:()=>o,metadata:()=>h,toc:()=>m});var i=n(5893),a=n(1151);const c='<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>EmbraceSQL Checklist</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/client/main.tsx"><\/script>\n  </body>\n</html>\n',l='import { App } from "./app";\nimport { EmbraceSQLClient, EmbraceSQLProvider } from "./checklist-react";\nimport { Container, ThemeProvider, createTheme } from "@mui/material";\nimport ReactDOM from "react-dom/client";\n\n// connect to where we mounted EmbraceSQL in our server\nconst client = new EmbraceSQLClient({\n  url: `${window.location.href}embracesql`,\n});\n\nconst theme = createTheme({});\n\n// whole application is wrapped in a provider to allow data access in any component\n// the main layout is the default theme and a nice center column\nReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(\n  <EmbraceSQLProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <Container maxWidth="md" sx={{ height: "90vh", display: "flex" }}>\n        <App />\n      </Container>\n    </ThemeProvider>\n  </EmbraceSQLProvider>,\n);\n',r='import { Public } from "./checklist-react";\nimport { ChecklistItems } from "./checklistitems";\nimport { Checklists } from "./checklists";\nimport { Box, Stack } from "@mui/material";\nimport React from "react";\n\n/**\n * Our simple application, controls our view transitions.\n */\nexport function App() {\n  // our currently selected Checklist, let\'s use the row type from the database\n  const [selectedChecklist, setSelectedChecklist] =\n    React.useState<Public.Tables.Checklist.Row>();\n  return (\n    <Stack direction={"row"} spacing={1} sx={{ flex: 1 }}>\n      <Box sx={{ flex: 1, display: "flex" }}>\n        <Checklists\n          onChecklistSelected={(checklist) => setSelectedChecklist(checklist)}\n        />\n      </Box>\n      <Box sx={{ flex: 1, display: "flex" }}>\n        {selectedChecklist ? (\n          <ChecklistItems checklistId={selectedChecklist?.id} />\n        ) : null}\n      </Box>\n    </Stack>\n  );\n}\n';var s=n(9286);const o={},d="Create Client",h={id:"React/Checklist Example/client",title:"Create Client",description:"Now we'll start in the React UI, let's get all the support code in place.",source:"@site/docs/React/Checklist Example/03-client.mdx",sourceDirName:"React/Checklist Example",slug:"/React/Checklist Example/client",permalink:"/docs/React/Checklist Example/client",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create a Server",permalink:"/docs/React/Checklist Example/server"},next:{title:"Create Checklists",permalink:"/docs/React/Checklist Example/checklists"}},p={},m=[{value:"Steps",id:"steps",level:2},{value:"Get MUI",id:"get-mui",level:3},{value:"Create App HTML",id:"create-app-html",level:3},{value:"Create a React Main",id:"create-a-react-main",level:3},{value:"Create a React App",id:"create-a-react-app",level:3}];function u(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"create-client",children:"Create Client"}),"\n",(0,i.jsx)(t.p,{children:"Now we'll start in the React UI, let's get all the support code in place."}),"\n",(0,i.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(t.h3,{id:"get-mui",children:"Get MUI"}),"\n",(0,i.jsx)(t.p,{children:"In our app directory, we need to add a few packages to get the MUI toolkit,\nwhich we'll be using for a grid user interface."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"npm install @mui/material @emotion/react @emotion/styled @mui/x-data-grid @mui/icons-material\n"})}),"\n",(0,i.jsx)(t.h3,{id:"create-app-html",children:"Create App HTML"}),"\n",(0,i.jsx)(t.p,{children:"We're making a single page app, so here is the single page."}),"\n",(0,i.jsx)(s.Z,{language:"html",title:"index.html",children:c}),"\n",(0,i.jsx)(t.h3,{id:"create-a-react-main",children:"Create a React Main"}),"\n",(0,i.jsxs)(t.p,{children:["Create the application root as shown. This will be loaded by ",(0,i.jsx)(t.code,{children:"index.html"}),"."]}),"\n",(0,i.jsx)(s.Z,{language:"tsx",title:"./src/client/main.tsx",children:l}),"\n",(0,i.jsx)(t.h3,{id:"create-a-react-app",children:"Create a React App"}),"\n",(0,i.jsx)(t.p,{children:"A very simple app at the root."}),"\n",(0,i.jsx)(s.Z,{language:"tsx",title:"./src/client/app.tsx",children:r})]})}function x(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);