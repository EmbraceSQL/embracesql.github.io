"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[52],{7979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>h,default:()=>v,frontMatter:()=>p,metadata:()=>m,toc:()=>x});var r=t(5893),a=t(1151);const s='<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Hello EmbraceSQL</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/client/main.tsx"><\/script>\n  </body>\n</html>\n',i="#root {\n\n    max-width: 100vw;\n      margin: 0 auto;\n      padding: 2rem;\n      text-align: center;\n}\n\nbody {\n  font-family: system-ui;\n  margin: 0;\n  display: flex;\n  place-items: center;\n  min-width: 100vw;\n  min-height: 100vh;\n}\n\n.card {\n  padding: 2em;\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n}\n",o='import {\n  EmbraceSQLClient,\n  EmbraceSQLProvider,\n  Public,\n} from "./dvdrental-react";\nimport "./main.css";\nimport React from "react";\nimport * as ReactDOM from "react-dom/client";\n\nconst client = new EmbraceSQLClient({\n  url: "http://localhost:3000/embracesql",\n});\n\nconst App = () => {\n  // this is hooking to an AutoCRUD method to read an actor\n  const {\n    loading,\n    results: actor,\n    error,\n  } = Public.Tables.Actor.useByActorId({ actorId: 100 });\n  // \ud83e\ude84 - automatic onChange saving though the hook, with debounce to not smoke your DB!\n  // notice there is no <form> to post back or additional hooks\n  if (loading) {\n    return (\n      <div>\n        <p>Loading...</p>\n      </div>\n    );\n  }\n  if (error) {\n    return (\n      <div>\n        <p>{`{error}`}</p>\n      </div>\n    );\n  }\n  if (actor) {\n    return (\n      <div className="card">\n        <input value={actor.firstName} onChange={actor.changeFirstName} />\n        <input value={actor.lastName} onChange={actor.changeLastName} />\n      </div>\n    );\n  }\n};\n\n// Supported in React 18+\nReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(\n  <React.StrictMode>\n    <EmbraceSQLProvider client={client}>\n      <App />\n    </EmbraceSQLProvider>\n  </React.StrictMode>,\n);\n',c='import { EmbraceSQLExpressApp } from "./dvdrental";\nimport { EmbraceViteApp } from "@embracesql/vite";\nimport express from "express";\n\nconst app = express();\n\n// hook embracesql middleware first\nconst embracesql = await EmbraceSQLExpressApp(\n  "postgres://postgres:postgres@localhost/dvdrental",\n);\napp.use("/embracesql", embracesql);\n// and then hook in vite\nconst vite = await EmbraceViteApp();\napp.use("/", vite);\n\napp.listen(3000, () => console.log("Server is listening on port 3000..."));\n',l='{\n  "extends": "@embracesql/shared/tsconfig/react.tsconfig.json"\n}\n';var d=t(9286);const p={},h="React",m={id:"react",title:"React",description:"EmbraceSQL generates support for React using hooks. The hooks:",source:"@site/docs/react.mdx",sourceDirName:".",slug:"/react",permalink:"/docs/react",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Problems",permalink:"/docs/problems"},next:{title:"SQL Scripts",permalink:"/docs/sql"}},u={},x=[{value:"Example",id:"example",level:2}];function g(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"react",children:"React"}),"\n",(0,r.jsx)(n.p,{children:"EmbraceSQL generates support for React using hooks. The hooks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Connect to any HTTP/S EmbraceSQL server endpoint"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, Update, Delete, and Refresh data (CRUD-R)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["In this example you will end up with read-write data access from a hot loading\n",(0,r.jsx)(n.a,{href:"https://vitejs.dev",children:"Vite"})," built application without:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"writing a line of SQL"}),"\n",(0,r.jsx)(n.li,{children:"Making a POJO"}),"\n",(0,r.jsxs)(n.li,{children:["Calling the database ",(0,r.jsx)(n.em,{children:"manually"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can look in the ",(0,r.jsx)(n.a,{href:"/docs/",children:"intro"})," to see how to generate the dvdrental code\nused in these example snippets. Make sure you have a dvdrental database created."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm install @embracesql/vite\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Yeah -- that's it, hard to believe I know... just a little more to make\nyour sample a module so we can use top level await, put ",(0,r.jsx)(n.code,{children:'"type": "module"'}),"\nin your ",(0,r.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"And how about a typescript preset."}),"\n",(0,r.jsx)(d.Z,{language:"json",title:"tsconfig.json",children:l}),"\n",(0,r.jsx)(n.p,{children:"Now it is time to generate the EmbraceSQL express server application."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mkdir -p ./src/server\nnpx embracesqlcli generate express --database postgres://postgres:postgres@localhost/dvdrental > ./src/server/dvdrental.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"And update the express server entry point:"}),"\n",(0,r.jsx)(d.Z,{language:"typescript",title:"./src/server/main.ts",children:c}),"\n",(0,r.jsx)(n.p,{children:"Make sure the server starts -- this will even hot reload the server -- and\nweb page we're about to build."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npx tsx watch ./src/server/main.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"And check for some data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -X POST http://localhost:3000/embracesql \\\n   -H \'Content-Type: application/json\' \\\n   -d \'{"operation":"Public.Actor.byActorId","parameters":{"actorId": 1}}\'\n'})}),"\n",(0,r.jsx)(n.p,{children:"At this point, if you are getting data -- it's time to make a react app!"}),"\n",(0,r.jsx)(n.p,{children:"Generate the client side, react hook code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mkdir -p src/client\nnpx embracesqlcli generate react --database postgres://postgres:postgres@localhost/dvdrental > ./src/client/dvdrental-react.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here is a super minimal React application to get you a single Actor\nfrom the database, and allow saving to the database without you writing\na line of SQL, or additional schema, or even a server."}),"\n",(0,r.jsx)(n.p,{children:"Gonna need an html page entry point."}),"\n",(0,r.jsx)(d.Z,{language:"html",title:"index.html",children:s}),"\n",(0,r.jsxs)(n.p,{children:["And attach a react component to ",(0,r.jsx)(n.code,{children:"#root"}),"."]}),"\n",(0,r.jsx)(d.Z,{language:"typescript",title:"./src/client/main.tsx",children:o}),"\n",(0,r.jsx)(n.p,{children:"And just a tiny bit of CSS:"}),"\n",(0,r.jsx)(d.Z,{language:"css",title:"./src/client/main.css",children:i}),"\n",(0,r.jsxs)(n.p,{children:["OK - the Express server should now be serving both EmbraceSQL and a fine\nReact app connected to it. ",(0,r.jsx)(n.a,{href:"http://localhost:3000",children:"Check it out"}),"."]})]})}function v(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);