"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9701],{4889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>b});var r=n(5893),a=n(1151);const s='"use client";\n\nimport {\n  EmbraceSQLClient,\n  EmbraceSQLProvider,\n  Public,\n} from "../../client/dvdrental-react";\n\nfunction Table() {\n  const { rows } = Public.Tables.Actor.useRows(\n    // using sort and pagination, generally how you would show tables\n    {\n      // showing the first page\n      offsetNumberOfRows: 0,\n      limitNumberOfRows: 10,\n      // multi-sort\n      sort: [\n        Public.Tables.Actor.SortOptions.lastNameAscending,\n        Public.Tables.Actor.SortOptions.firstNameAscending,\n      ],\n    },\n  );\n\n  if (rows) {\n    // old school - let\'s make a table - EmbraceSQL generates column\n    // name metadata based on the table schemas which makes it easy to iterate\n    return (\n      <table>\n        <thead>\n          <tr>\n            {Public.Tables.Actor.ColumnNames.map((c) => (\n              <th key={c}>{c}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((r) => (\n            <tr key={r.rowNumberInResultset}>\n              {Public.Tables.Actor.ColumnNames.map((c) => (\n                <td key={c}>{`${r[\n                  Public.Tables.Actor.Columns[c].fieldName\n                ].toLocaleString()}`}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default function Page() {\n  // connect to where we mounted EmbraceSQL in our server\n  const client = new EmbraceSQLClient({\n    url: `/embracesql`,\n  });\n  // set up the EmbraceSQL context\n  return (\n    <EmbraceSQLProvider client={client}>\n      <Table />\n    </EmbraceSQLProvider>\n  );\n}\n';var o=n(9286),l=n(1430);const c={},i="Database Table",d={id:"React/Cookbook/table",title:"Database Table",description:"Sometimes you just want all the rows, or pages of the rows. EmbraceSQL generates",source:"@site/docs/React/Cookbook/table.mdx",sourceDirName:"React/Cookbook",slug:"/React/Cookbook/table",permalink:"/docs/React/Cookbook/table",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Script Report",permalink:"/docs/React/Cookbook/report"},next:{title:"AutoCRUD",permalink:"/docs/autocrud"}},u={},b=[{value:"Requirements",id:"requirements",level:2},{value:"Steps",id:"steps",level:2},{value:"Generate Code",id:"generate-code",level:3},{value:"Code React",id:"code-react",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"database-table",children:"Database Table"}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes you just want all the rows, or pages of the rows. EmbraceSQL generates\na ",(0,r.jsx)(t.code,{children:"useRows"})," hook for ever table."]}),"\n",(0,r.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(t.p,{children:["Make sure you are read as specified in the ",(0,r.jsx)(t.a,{href:"./",children:"Cookbook"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(t.h3,{id:"generate-code",children:"Generate Code"}),"\n",(0,r.jsx)(t.p,{children:"Now that there is a SQL Script - regenerate from the database. If you are already\nrunning NextJS, it'll hot reload."}),"\n",(0,r.jsx)(o.Z,{language:"shell",children:l.Z}),"\n",(0,r.jsx)(t.h3,{id:"code-react",children:"Code React"}),"\n",(0,r.jsx)(t.p,{children:"Now use a table hook. Note the options to paginate and sort."}),"\n",(0,r.jsx)(o.Z,{language:"tsx",title:"src/app/table/page.tsx",children:s})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1430:(e,t,n)=>{n.d(t,{Z:()=>r});const r="#!/usr/bin/env bash\n\nmkdir -p src/server\nnpx embracesqlcli generate node --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/server/dvdrental.ts\n\nmkdir -p src/client\nnpx embracesqlcli generate react --database postgres://postgres:postgres@localhost/dvdrental --sqlScriptsFrom ./sql > ./src/client/dvdrental-react.ts"}}]);